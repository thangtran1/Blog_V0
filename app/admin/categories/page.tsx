"use client";

import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  FolderOpen,
  Plus,
  Search,
  MoreHorizontal,
  Edit,
  Trash2,
  FileText,
  Eye,
} from "lucide-react";
import { useState } from "react";
import CategoryForm from "@/components/admin/category-form";

// Mock data
const categories = [
  {
    id: 1,
    name: "React",
    slug: "react",
    description: "Th∆∞ vi·ªán JavaScript ƒë·ªÉ x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng",
    color: "#61DAFB",
    icon: "‚öõÔ∏è",
    postCount: 12,
    isActive: true,
    createdAt: "2024-01-10",
  },
  {
    id: 2,
    name: "Next.js",
    slug: "nextjs",
    description: "Framework React cho production",
    color: "#000000",
    icon: "‚ñ≤",
    postCount: 8,
    isActive: true,
    createdAt: "2024-01-09",
  },
  {
    id: 3,
    name: "TypeScript",
    slug: "typescript",
    description: "JavaScript v·ªõi type safety",
    color: "#3178C6",
    icon: "üìò",
    postCount: 15,
    isActive: true,
    createdAt: "2024-01-08",
  },
  {
    id: 4,
    name: "CSS",
    slug: "css",
    description: "Styling v√† layout cho web",
    color: "#1572B6",
    icon: "üé®",
    postCount: 6,
    isActive: true,
    createdAt: "2024-01-07",
  },
  {
    id: 5,
    name: "JavaScript",
    slug: "javascript",
    description: "Ng√¥n ng·ªØ l·∫≠p tr√¨nh web",
    color: "#F7DF1E",
    icon: "üü®",
    postCount: 20,
    isActive: true,
    createdAt: "2024-01-06",
  },
  {
    id: 6,
    name: "Node.js",
    slug: "nodejs",
    description: "JavaScript runtime cho backend",
    color: "#339933",
    icon: "üü¢",
    postCount: 4,
    isActive: false,
    createdAt: "2024-01-05",
  },
];

const stats = [
  { title: "T·ªïng danh m·ª•c", value: "8", color: "from-blue-500 to-blue-600" },
  { title: "ƒêang ho·∫°t ƒë·ªông", value: "6", color: "from-green-500 to-green-600" },
  { title: "T·∫°m d·ª´ng", value: "2", color: "from-yellow-500 to-yellow-600" },
  { title: "B√†i vi·∫øt", value: "65", color: "from-purple-500 to-purple-600" },
];

export default function AdminCategories() {
  const [searchTerm, setSearchTerm] = useState("");
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [editingCategory, setEditingCategory] = useState<any>(null);

  const filteredCategories = categories.filter(
    (category) =>
      category.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      category.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100 flex items-center gap-2">
            <FolderOpen className="w-6 h-6" />
            Qu·∫£n l√Ω danh m·ª•c
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-1">
            T·∫°o v√† qu·∫£n l√Ω danh m·ª•c cho b√†i vi·∫øt c·ªßa b·∫°n
          </p>
        </div>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button className="bg-gradient-to-r from-green-500 to-green-600">
              <Plus className="w-4 h-4 mr-2" />
              T·∫°o danh m·ª•c m·ªõi
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-2xl ">
            <DialogHeader>
              <DialogTitle>T·∫°o danh m·ª•c m·ªõi</DialogTitle>
            </DialogHeader>
            <CategoryForm onClose={() => setIsCreateDialogOpen(false)} />
          </DialogContent>
        </Dialog>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {stats.map((stat, index) => (
          <Card key={index}>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600 dark:text-gray-400">
                    {stat.title}
                  </p>
                  <p className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                    {stat.value}
                  </p>
                </div>
                <div
                  className={`w-12 h-12 rounded-lg bg-gradient-to-r ${stat.color} opacity-20`}
                ></div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Search */}
      <Card>
        <CardContent className="p-4">
          <div className="relative max-w-md">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <Input
              placeholder="T√¨m ki·∫øm danh m·ª•c..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
        </CardContent>
      </Card>

      {/* Categories Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredCategories.map((category) => (
          <Card
            key={category.id}
            className="hover:shadow-lg transition-shadow duration-200"
          >
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-3">
                  <div
                    className="w-12 h-12 rounded-lg flex items-center justify-center text-xl"
                    style={{ backgroundColor: `${category.color}20` }}
                  >
                    {category.icon}
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900 dark:text-gray-100">
                      {category.name}
                    </h3>
                    <p className="text-sm text-gray-500">/{category.slug}</p>
                  </div>
                </div>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="ghost" size="icon" className="h-8 w-8">
                      <MoreHorizontal className="w-4 h-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end">
                    <DropdownMenuItem>
                      <Eye className="mr-2 h-4 w-4" />
                      Xem b√†i vi·∫øt
                    </DropdownMenuItem>
                    <DropdownMenuItem
                      onClick={() => setEditingCategory(category)}
                    >
                      <Edit className="mr-2 h-4 w-4" />
                      Ch·ªânh s·ª≠a
                    </DropdownMenuItem>
                    <DropdownMenuItem className="text-red-600">
                      <Trash2 className="mr-2 h-4 w-4" />
                      X√≥a
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>

              <p className="text-sm text-gray-600 dark:text-gray-400 mb-4 line-clamp-2">
                {category.description}
              </p>

              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Badge
                    className={
                      category.isActive
                        ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400"
                        : "bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400"
                    }
                  >
                    {category.isActive ? "Ho·∫°t ƒë·ªông" : "T·∫°m d·ª´ng"}
                  </Badge>
                </div>
                <div className="flex items-center gap-1 text-sm text-gray-500">
                  <FileText className="w-4 h-4" />
                  {category.postCount} b√†i vi·∫øt
                </div>
              </div>

              <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                <p className="text-xs text-gray-500">
                  T·∫°o ng√†y: {category.createdAt}
                </p>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Edit Dialog */}
      <Dialog
        open={!!editingCategory}
        onOpenChange={() => setEditingCategory(null)}
      >
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Ch·ªânh s·ª≠a danh m·ª•c</DialogTitle>
          </DialogHeader>
          {editingCategory && (
            <CategoryForm
              category={editingCategory}
              onClose={() => setEditingCategory(null)}
            />
          )}
        </DialogContent>
      </Dialog>

      {filteredCategories.length === 0 && (
        <Card>
          <CardContent className="p-8 text-center">
            <FolderOpen className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
              Kh√¥ng t√¨m th·∫•y danh m·ª•c
            </h3>
            <p className="text-gray-600 dark:text-gray-400 mb-4">
              Th·ª≠ thay ƒë·ªïi t·ª´ kh√≥a t√¨m ki·∫øm
            </p>
            <Button onClick={() => setIsCreateDialogOpen(true)}>
              T·∫°o danh m·ª•c ƒë·∫ßu ti√™n
            </Button>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
